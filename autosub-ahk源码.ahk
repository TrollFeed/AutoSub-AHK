; Generated by AutoGUI 2.6.2
; ===========================
; Author: Jerry Jian
;   YouTube: https://www.youtube.com/channel/UC2xBvmv-lhsY4suxv46lplg?view_as=subscriber
;   Blog: http://jdev.tw/blog
; v1.0 2020/05/13
;   Call gen.bat to generate subtitle. You can change the autosub parameters in gen.bat.
; v1.0.1 2020/05/14 minor changes
; v1.0.2 2020/05/16 Add .wav to allowed video format
; v1.0.3 2020/05/18 Add .mp3 to allowed video format
; v1.0.4 2020/05/23 Add test.bat 
; v1.0.5 2020/09/02 Add French language
; v1.0.6 2020/09/21 Add tr-tr Turkish (Turkey)
; v1.0.7 2021/01/21 Add ru-ru Russian
; v1.0.8 2021/03/05 Read language-codes from ini file
; v1.1.8 2021/10/15 Added xunfeiyun api support, API switching, Auditok options
; v1.1.9 2021/10/18 Optimized Auditok options to 0.5-10 50 0.3 -nsml
; ===========================
#SingleInstance Force
#NoEnv
SetWorkingDir %A_ScriptDir%
SetBatchLines -1

#Include %A_ScriptDir%\libraries\ControlColor.ahk
#Include %A_ScriptDir%\libraries\read-ini.ahk

I_ICON := A_ScriptDir . "\libraries\cc.ico"
global videoFiles
global VIDEO_FORMAT_FAILED
videoFiles := []
VALID_VIDEO_FORMAT := "*.mp4; *.mp3; *.wav"

version := "v1.1.8"
_iCurrentLanguage := A_Language
;; test_
;_iCurrentLanguage := "english"
;; _test 

; 界面语言设定
if (_iCurrentLanguage == "0804" || _iCurrentLanguage == "1004") {  ; Chinese_Simplified
  TITLE := "AutoSub-AHK 字幕生成器"
  LANGUAGES := "zh_CN"
  API_LABEL := "API接口"
  INVALID_API := "API接口错误，请从列表中选择"
  MAX_DUR := "最长字幕（0.1-10秒，默认10）"
  MIN_DUR := "最短字幕（0.1-10秒，默认0.5）"
  ENERGY_THRESH := "音量阈值（1-100，默认50）"
  MAX_SILENCE := "最长沉默（字幕中允许的最长无声间隔；0.1-10秒，默认0.3）"
  AUDITOK_CONTROLS := "Auditok断句选项"
  VIDEO_LANGUAGE := "视频语言(&L)"
  VIDEO_FILES := "选择视频文件(&S)"
  OUTPUT_FILENAME := "输出文件名(&O)"
  OUTPUT_MSG := "(输出类型仅支持.txt或.srt)"
  DRAG_MSG := "(" . VALID_VIDEO_FORMAT . ") 支持拖拽上传"  
  BTN_OK := "开始转录(&E)"
  BTN_CLOSE := "关闭(&C)"
  VIDEO_SELECT_TITLE := "选择视频文件（可多选）"
  VIDEO_FORMAT_FAILED := "文件后缀必须为 " . VALID_VIDEO_FORMAT
} else if (_iCurrentLanguage == "0404" || _iCurrentLanguage == "0c04" || _iCurrentLanguage == "1404") {  ; Chinese_Traditional
  TITLE := "AutoSub-AHK 字幕產生器"
  LANGUAGES := "zh_TW"
  API_LABEL := "API接口"
  INVALID_API := "API接口错误，请从列表中选择"
  MAX_DUR := "最长字幕（0.1-10秒，默认10）"
  MIN_DUR := "最短字幕（0.1-10秒，默认0.5）"
  ENERGY_THRESH := "音量阈值（1-100，默认50）"
  MAX_SILENCE := "字幕中最长沉默（0.1-10秒，默认0.3）"
  AUDITOK_CONTROLS := "Auditok断句选项"
  VIDEO_LANGUAGE := "影片語言(&L)"
  VIDEO_FILES := "選擇影片檔案(&S)"
  OUTPUT_FILENAME := "輸出檔名(&O)"
  OUTPUT_MSG := "(副檔名必須為.txt或.srt)"
  DRAG_MSG := "(" . VALID_VIDEO_FORMAT . ") 拖曳功能已啟用"
  BTN_OK := "確定執行(&E)"
  BTN_CLOSE := "關閉(&C)"
  VIDEO_SELECT_TITLE := "選擇影片檔案(可複選)"
  VIDEO_FORMAT_FAILED := "影片副檔名必須是 " . VALID_VIDEO_FORMAT
} else { ; English
  TITLE := "AutoSub-AHK Subtitle Generator"
  LANGUAGES := "en_US"
  API_LABEL := "API Provider"
  INVALID_API := "Incorrect API, please select from the list"
  VIDEO_LANGUAGE := "Video &Language"
  MAX_DUR := "Max duration (0.1-10sec, default 10)"
  MIN_DUR := "Min duration (0.1-10sec, default 0.5)"
  ENERGY_THRESH := "Volume cutoff (1-100，default 50)"
  MAX_SILENCE := "Max silence gap allowed in subtitle (0.1-10sec，default 0.3)"
  AUDITOK_CONTROLS := "Auditok Options"
  VIDEO_FILES := "&Select Video File(s)"
  OUTPUT_FILENAME := "&Output Path"
  OUTPUT_MSG := "(Only .txt or .srt output supported)"
  DRAG_MSG := "(" . VALID_VIDEO_FORMAT . ") Drag files here"
  BTN_OK := "&Transcribe"
  BTN_CLOSE := "&Close"
  VIDEO_SELECT_TITLE := "Select video file(s)"
  VIDEO_FORMAT_FAILED := "Video's extension must be " . VALID_VIDEO_FORMAT
}

FileEncoding, UTF-8
; Read autosub-ahk.ini, create variables based on Section-Key: LANGUAGEScount, zh_CN1, zh_CN2... zh_TW1, zh_TW2...en_US1, en_US2...
ReadIni("autosub-ahk.ini")

_sLanguages := ""
;设置_sLanguages
Loop, %LANGUAGEScount% {
  ;循环LANGUAGEScount次,A_Index为当前遍历次数，把变量zh_CN1、zh_CN2...的值用 | 串接成一长串，赋予_sLanguages；
  if (LANGUAGES == "zh_CN") {
    _sLanguages .= zh_CN%A_Index% . "|"
  } else if (LANGUAGES == "zh_TW") {
    _sLanguages .= zh_TW%A_Index% . "|"
  } else {
    _sLanguages .= en_US%A_Index% . "|"
  }
}

;把LANGUAGES这个str的值改为|串接的语言下拉菜单选项
LANGUAGES := _sLanguages

Menu Tray, Icon, %I_ICON%

Gui +hWndhMainWnd +Resize -MaximizeBox

Gui Font, s9, Segoe UI
Gui Add, Text, x12 y17 w120 h19, %API_LABEL%
Gui Add, DDL, vCmbAPI x12 y38 w281, Google||Xunfei
Gui Add, ComboBox, vCmbLanguage x12 y98 w281, %LANGUAGES%
Gui Add, Text, x12 y77 w120 h19, %VIDEO_LANGUAGE%
Gui Add, Text, x174 y307 w250 h24 +0x200   , %DRAG_MSG%
Gui Add, Button, gbtnSelectFiles x12 y303 w150 h30, %VIDEO_FILES%
Gui Add, ListBox, vListBox1 x12 y342 w489 h136  +0x1201    
Gui Add, Text, x12 y503 w149 h24, %OUTPUT_FILENAME%
Gui Add, Edit, vedtOutputFilename x12 y539 w489 h27
Gui Add, Button, hWndhBtne2 gbtnOK x75 y587 w147 h48 +Default    , %BTN_OK%
Gui Add, Button, gbtnClose x276 y587 w147 h48, %BTN_CLOSE%
Gui Add, Text, x174 y503 w170 h24, %OUTPUT_MSG%
Gui Add, Text, x12 y490 w499 h2 +0x10    
Gui Add, Text, x12 y194 w183 h24, %MAX_DUR%
Gui Add, Text, x12 y222 w183 h24, %MIN_DUR%
Gui Add, Text, x12 y166 w183 h24, %ENERGY_THRESH%
Gui Add, Text, x12 y252 w183 h48, %MAX_SILENCE%
Gui Add, Text, x11 y138 w183 h24, %AUDITOK_CONTROLS%
Gui Add, Edit, vEnergyThresh x207 y166 w86 h24, 50
Gui Add, Edit, vMaxDur x207 y194 w86 h24, 10
Gui Add, Edit, vMinDur x207 y222 w86 h24, 0.5
Gui Add, Edit, vMaxSilence x207 y252 w86 h24, 0.3

Gui Show, w520 h660, %TITLE% %version%
Return

/*
CmbLanguageChange:
  GuiControlGet, CmbLanguage,,
  msgbox lang=%CmbLanguage%
Return
*/

btnSelectFiles:
  ;文件选择框 FileSelectFile, OutputVar , Options, RootDir\Filename, Title, Filter
  ; M3 = Multiselect existing files，可复选
  FileSelectFile, files, M3, , %VIDEO_SELECT_TITLE%, %VALID_VIDEO_FORMAT%  
  ;文件选择存入files
  if (files = "") {
  ;files为空时停止
    return
  }
  ;msgbox files=%files% 

  folder := ""
  ;定义folders容器
  Loop, parse, files, `n
  {
      ;多选模式下files是一个列表，结尾是`n
      ;files用于储存所有文件的路径
    if (A_Index = 1) {
      folder = %A_LoopField%
    } else {
      isMP4 := chkVideoFile(A_LoopField)
      if (isMP4 = 1) {
        videoFiles.push(folder . "\" . A_LoopField)  
        ;循环遍历files的每一行，用chkVideoFile函数检测路径后缀，是否返回True
        ;用push方法构建videoFiles数组，即视频路径列表

      }
    }
  }
  files := ""
  for index, element in videoFiles 
  {
    ;files为定义的空容器；用for循环，为videoFiles(Array)中的每一个element执行一次下列命令
    ;MsgBox % "Element number " . index . " is " . element
    if (index = 1) {
      name := element
      StringReplace name, name, .mp4, .srt
      StringReplace name, name, .wav, .srt
      StringReplace name, name, .mp3, .srt
      GuiControl, , edtOutputFilename, %name%
      ;读取videoFiles中的第一个element（index为1）的路径，后缀替换为srt，
    }
    files := files . element . "|"
  ;for循环，把element逐个放到files里面，每一行用 | 串接作为输入文件路径列表
  }
  GuiControl, , ListBox1, %files%
  ;放到GUI中的ListBox1，展示给用户
Return

btnOK(CtrlHwnd, GuiEvent, EventInfo, ErrLevel := "") {
  ;按下确定按钮时确定按钮（g-label为gbtnOK），执行下方的subroutine
  Gui, Submit
  ;1.将所有控件的内容提交给相应的变量
  
  GuiControlGet, CmbLanguage,,
  ;2.获取用户选择的语言代码
  iPos := InStr(CmbLanguage, " ")
  ;2.1定义 iPos (position)变量，在语言代码中用Instr搜索空格位置（比如："en-US English"中空格是第6位）
  Language := Substr(CmbLanguage, 1, iPos-1)
  LanguageParam := Substr(CmbLanguage, 1, iPos-1)
  ;2.2提取位置1到5(iPos-1)的字符，即语言代码"en-US"，存入变量Language(用于文件名生成）和  LanguageParam(用于生成autosub参数)
  ;MsgBox lang=%Language%$

  GuiControlGet, edtOutputFilename,,
  ;获取输出路径edtOutputFilename
  GuiControlGet, EnergyThresh,,
  GuiControlGet, MaxDur,,
  GuiControlGet, MinDur,,
  GuiControlGet, MaxSilence,,
  AuditokParams := "-et " . EnergyThresh . " -mxrs " . MaxDur . " -mnrs " . MinDur . " -mxcs " . MaxSilence

  
  ;***新增部分***
  GuiControlGet, CmbAPI,,
  ;3.获取用户选择的API接口，提取字符，存入ApiName
  ApiName := Substr(CmbApi, 1)
  if (ApiName == "Google") {
    BatApi := "-S"
     if (Language = "zh-CN") {
    LanguageParam := "cmn-hans-cn"
  } else if (Language = "zh-TW") {
    LanguageParam := "cmn-hant-tw"
  }  
  ;特殊处理谷歌api的中文语言代码
 
  } else if (ApiName == "Xunfei") {
    BatApi := "-sapi xfyun -sconf"

    StringLower, xfLanguage, Language
    ;读取xfyun_key，替换其中的language替换为支持的语言
    FileRead, JSONtext, %A_ScriptDir%/xfyun_key.json
      if (Language = "zh-CN") {
        ;xfkey := RegExReplace(JSONtext, """language"":\s"".*""`," , """language"": ""zh_cn"",")
        xfkey := RegExReplace(JSONtext, "mU)language"":\s"".*""`," , "language"": ""zh_cn"",")
      } else if (Language = "en-US") {
        ;xfkey := RegExReplace(JSONtext, """language"":\s"".*""`," , """language"": ""en_us"",")
        xfkey := RegExReplace(JSONtext, "mU)language"":\s"".*""`," , "language"": ""en_us"",")
      } else if (Language = "ja-JP") {
        ;xfkey := RegExReplace(JSONtext, """language"":\s"".*""`," , """language"": ""en_us"",")
        xfkey := RegExReplace(JSONtext, "mU)language"":\s"".*""`," , "language"": ""ja_jp"",")
      }
        FileDelete, %A_ScriptDir%/xfyun_use_key.json
        FileAppend , %xfkey%, %A_ScriptDir%/xfyun_use_key.json, UTF-8-RAW
        ;MsgBox key used %xfkey%

    LanguageParam := A_WorkingDir . "\" . "xfyun_use_key.json"
    ;此处讯飞api需要一个json配置路径，用这个变量存一下，不用大改下面的bat命令结构

  } else {
    MsgBox %INVALID_API%
  } 

  
  for index, element in videoFiles
  { ;遍历videoFiles数组下面的所有视频路径
    videoFilename := element
    if (index = 1) {
      newFilename := deleteOldFile(edtOutputFilename, Language)
      ;调用下方定义的deleteOldFile函数，参数为路径和语言代码,返回一个文件名
      if (InStr(edtOutputFilename, ".txt") > 0) {
        batFilename := "gen-txt.bat"
      } else {
        batFilename := "gen.bat"
      }
      ;根据输出路径后缀判定运行gen.bat还是gen-txt.bat文件
      ;MsgBox %A_ScriptDir%\%batFilename% %Language% "%videoFilename%" "%edtOutputFilename%" "%newFilename%"
      Run %A_ScriptDir%\%batFilename% "%BatApi%" "%LanguageParam%" "%videoFilename%" "%edtOutputFilename%" "%newFilename%" "%AuditokParams%"
      ;运行根目录中的某个bat文件，插入%1-%5号参数
    } else {
      edtOutputFilename := videoFilename
      StringReplace edtOutputFilename, edtOutputFilename, .mp4, .srt
      StringReplace edtOutputFilename, edtOutputFilename, .wav, .srt
      StringReplace edtOutputFilename, edtOutputFilename, .mp3, .srt
      newFilename := deleteOldFile(edtOutputFilename, Language)
      if (InStr(edtOutputFilename, ".txt") > 0) {
        batFilename := "gen-txt.bat"
      } else {
        batFilename := "gen.bat"
      }
      Run %A_ScriptDir%\%batFilename% "%BatApi%" "%LanguageParam%" "%videoFilename%" "%edtOutputFilename%" "%newFilename%" "%AuditokParams%"
    }
  }
  ExitApp
}  

btnClose:
  WinClose
Return

GuiSize:
  If (A_EventInfo == 1) {
    Return
  }

Return

GuiContextMenu:
Return

GuiDropFiles(GuiHwnd, FileArray, CtrlHwnd, X, Y) {
  ;检测到拖拽导入文件时运行的Subroutine(也有可能是函数?)
  ;这里系统函数GuiDropFiles，参数名默认如上。
  ;文件路径都导入到默认名为FileArray的数组
  ;https://www.autohotkey.com/docs/commands/Gui.htm#GuiDropFiles
  videoFiles := []
  ;又定义了一遍videoFiles[]数组
  for i, file in FileArray 
  ;开始循环遍历拖拽的全部文件
  { 
    ;MsgBox File %i% is:`n%file%
    ;MsgBox备注基本都是原作者留下的，模板代码里面没用的部分
    if (chkVideoFile(file)) {
      videoFiles.push(file)
      ;如果chkVideoFile函数返回文件为视频文件，将file路径增添到videoFiles数组末尾
    }
  }
  for index, element in videoFiles
  ;for循环，遍历videoFiles数组
  {
    if (index = 1) {
      ;将第一个视频路径（数组中的index=1的element），存入name，后缀替换为srt
      name := element
      StringReplace name, name, .mp4, .srt
      StringReplace name, name, .mp3, .srt
      StringReplace name, name, .wav, .srt
      GuiControl, , edtOutputFilename, %name%
      ;name显示到edtOutputFilename（输出文件路径栏）
    }
    files := files . element . "|"
    ;把element逐个和 | 串接files里面，作为输入文件路径列表，
  }
  GuiControl, , ListBox1, %files%  
  ;files列表在ListBox1中显示
}

OnClipboardChange:
Return
;碰到剪切板事件就return停止执行脚本
GuiClose:
  ExitApp
;然后关闭窗口，推出脚本

ListBox1:
  Return

/*
 * 函数chkVideoFile，输入文件名file检查输入视频文件后缀是否为.mp4、mp3或.wav
*/
chkVideoFile(file) {
  ;MsgBox file=%file%
  StringUpper, file, file
  ;转化文件名为大写，进行后缀判断
  iPos1 := InStr(file, ".MP4")
  iPos2 := InStr(file, ".WAV")
  iPos3 := InStr(file, ".MP3")
  if (iPos1 <= 0 && iPos2 <= 0 && iPos3 <= 0) {
    MsgBox %VIDEO_FORMAT_FAILED% (%file%)
    Return false
  }
  Return True
}

/*
 * 刪除已存在的重名.srt文件
*/
deleteOldFile(file, language) {
  iPos := InStr(file, ".")
  newFilename := Substr(file, 1, iPos) . language . Substr(file, iPos, 10)
  if FileExist(newFilename) {
    FileDelete, %newFilename%
  }
  return newFilename
}